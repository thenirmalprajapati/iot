//Go to "File" -> "Preferences" -> "Additional Boards Manager URLs".
//http://arduino.esp8266.com/stable/package_esp8266com_index.json
//Install the ESP8266 Boards Package
//"Tools" -> "Board" -> "Boards Manager."
///search for "esp8266"
//Select NodeMCU Board:
//Go to "Tools" -> "Board" -> "NodeMCU 1.0 (ESP-12E Module)".
//Set Upload Speed and CPU Frequency:
//Go to "Tools" -> "Upload Speed" and set it to "115200."
//Go to "Tools" -> "CPU Frequency" and set it to "80 MHz."
//Install ThinkSpeak Library:



//PIR-motion
//No breadboard needed, we use LED of ardiono i.e. 13
int isObstacle = 8;
int ledPin = 13; 


int val = 0;
bool motionState = false; // We start with no motion detected.

void setup() {
 
  pinMode(ledPin, OUTPUT);
  pinMode(isObstacle, INPUT);

 
  Serial.begin(9600);
}

void loop() {
  
  val = digitalRead(isObstacle);

  
  if (val == HIGH) {
    digitalWrite(ledPin, HIGH); // Turn on the on-board LED.

    if (motionState == false) {
      Serial.println("Motion detected!");
      motionState = true;
    }
  }

  else {
    digitalWrite(ledPin, LOW); // Turn off the on-board LED.
    
    if (motionState == true) {
      Serial.println("Motion ended!");
      motionState = false;
    }
  }
}
------------------------------------------------------------------------------------------------------------------------------------------
//IR-opstacal found -not-found

int LED = 7; 
int isObstaclePin = 10; 
int isObstacle = HIGH; 
void setup() { 
  pinMode(isObstaclePin,INPUT); 
  pinMode(LED, OUTPUT); 
  Serial.begin(9600); 
} 

void loop() { 
  isObstacle = digitalRead(isObstaclePin); 
  if(isObstacle == LOW) { 
    Serial.println("OBSTACLE FOUND"); 
    digitalWrite(LED, HIGH); 
  } else { 
    Serial.println("OBSTACLE NOT FOUND"); 
    digitalWrite(LED, LOW); 
  } 
} 

-------------------------------------------------------------------------------------------------------------------------------------------
 //ULTRASONIC
 
 
int Trigger_pin = 7; 
int Echo_pin = 8; 
double duration,distance; 
int LED = 11; 
void setup() { 
Serial.begin(9600); 
pinMode(Trigger_pin, OUTPUT); 
pinMode(Echo_pin, INPUT); 
pinMode(LED,OUTPUT); 
} 

void loop() { 

  digitalWrite(Trigger_pin, LOW); 
  delayMicroseconds(10); 
  digitalWrite(Trigger_pin, HIGH); 
  delayMicroseconds(10); 
  digitalWrite(Trigger_pin, LOW); 
  duration = pulseIn(Echo_pin,HIGH); 
  distance = duration * 0.034 / 2; 

  if(distance < 20) { 
     digitalWrite(LED,HIGH); -
  } else{ 
     digitalWrite(LED,LOW); 
  } 
  Serial.println(duration); 
  Serial.print(distance); 
  Serial.println("cm"); 
  delay(1000); 
} 

--------------------------------------------------------------------------------------------------------------------
//GAS

int yellowLED = 12;
int redLED = 13;
double sensorValue; 
void setup() { 
  Serial.begin(9600); pinMode(yellowLED, OUTPUT); 
  pinMode(redLED, OUTPUT); 
  pinMode(A0, INPUT); 
} 

void loop() { 
  sensorValue = analogRead(A0); 
  if(sensorValue > 250 && sensorValue < 350){ 
    digitalWrite(yellowLED,HIGH); 
  } else if(sensorValue > 350) { 
    digitalWrite(yellowLED,LOW); 
    digitalWrite(redLED,HIGH); 
  } else {
    digitalWrite(yellowLED,LOW); 
  digitalWrite(redLED,LOW); } 
  Serial.println(sensorValue); 
  delay(1000); 
}

--------------------------------------------------------------------------------------------------------------------
//PULSE

//minus to GND
//plus to VCC(5V)
//S to A0



---------------------------------------------------------------------------------------------------------------------

//wifi temperature


#include <DallasTemperature.h>
#include <OneWire.h>
#include <ThingSpeak.h>
#include <ESP8266WiFi.h>

int tempPin = 14;
//int LED = 8;

OneWire ow(tempPin);
DallasTemperature dt(&ow);

const char* ssid = "Suraj One Plus"; //Enter SSID
const char* password = "suraj997"; //Enter Password

int status = WL_IDLE_STATUS;
WiFiClient client;

unsigned long myChannelNumber = 2369322;
const char * myWriteAPIKey = "SXTG221BTMU5G50L";

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  pinMode(tempPin,INPUT);
  //pinMode(LED,OUTPUT);
  Serial.println("Serial has begun");
  dt.begin();
  
  //wifi
  WiFi.disconnect(true);
  WiFi.begin(ssid, password);
  ThingSpeak.begin(client);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
   }
  Serial.println("WiFi connected");
  
}

void loop() {
  dt.requestTemperatures();
  float tempc,tempf;
  // put your main code here, to run repeatedly:
  Serial.println("Temperature is");
  tempc=dt.getTempCByIndex(0);
  tempf=dt.getTempFByIndex(0);
  Serial.println(tempc);
  Serial.println(tempf);
//  digitalWrite(LED,LOW);


 // if(tempc > 30){
//    digitalWrite(LED,HIGH);
 // }

int x = ThingSpeak.writeField(myChannelNumber, 1, (float)tempc, myWriteAPIKey);
Serial.println(x);
}


--------------------------------------------------------------------------------------------------------------------
//Pulse wifi


#include <ESP8266WiFi.h>
#include <ThingSpeak.h>

int const PULSE_SENSOR_PIN = 0;
int Signal;                // Store incoming ADC data. Value can range from 0-1024
int Threshold = 200;       // Determine which Signal to "count as a beat" and which to ignore.

//long duration;
//int distance;

const char* ssid = "Microsoft"; //Enter SSID
const char* password = "skuuuuur"; //Enter Password

int status = WL_IDLE_STATUS;
WiFiClient client;
int sensorValue;
unsigned long myChannelNumber = 2369321;
const char * myWriteAPIKey = "Z0MCSHBJTFQIJPVB";

void setup(void)
{ 
  
   pinMode(LED_BUILTIN,OUTPUT);
   Serial.begin(115200);
   pinMode(A0, INPUT);
   WiFi.disconnect(true);
   WiFi.begin(ssid, password);
   ThingSpeak.begin(client);
   while (WiFi.status() != WL_CONNECTED) {
     delay(500);
     Serial.print(".");
   }
   Serial.println("WiFi connected");
}

void loop() 
{
  Signal = analogRead(PULSE_SENSOR_PIN); // Read the sensor value
  Serial.println(Signal);                // Send the signal value to serial plotter
  if(Signal > Threshold){                // If the signal is above threshold, turn on the LED
    digitalWrite(LED_BUILTIN,HIGH);
  } else {
    digitalWrite(LED_BUILTIN,LOW);     // Else turn off the LED
  }
 Serial.println("Sensor Reading = ");
 int x = ThingSpeak.writeField(myChannelNumber, 1,Signal, myWriteAPIKey);
 Serial.println(x);
 delay (1000);
}


----------------------------------Gas Wifi-------------------------------------------------------------

#include <ThingSpeak.h>
#include<ESP8266WiFi.h>
#define pulsePin A0

const char* ssid = "Suraj One Plus";
const char* password = "suraj997";

int status = WL_IDLE_STATUS;
WiFiClient client;
int sensorValue;
unsigned long myChannelNumber = 2369329;
const char * myWriteAPIKey = "DZ0BRK27AWPJRB8F";

void setup() {
  // put your setup code here, to run once:
   Serial.begin(9600);
   
 pinMode(pulsePin,INPUT);
 
 WiFi.disconnect(true);
 WiFi.begin(ssid,password);
 ThingSpeak.begin(client);
 while (WiFi.status() != WL_CONNECTED) {
 delay(500);
 Serial.print(".");
 }
 Serial.println("WiFi connected");
}



void loop() {


  float value;
    value = analogRead(pulsePin);
    Serial.println(value);

 int x = ThingSpeak.writeField(myChannelNumber, 1, (float)value, myWriteAPIKey);
 delay (1000);
}


-----------------------------------------------------LDR---------------------------------------------------------------------------


// leg one =>  power(5v)
//leg two => resistor=>same line =>analog A0

int LED = 13;
int LDR = A0;

void setup() {
  pinMode(LED, OUTPUT);
  pinMode(LDR, INPUT);
  Serial.begin(9600);
}

void loop() {
  int LDRread = analogRead(LDR);

  Serial.println(LDRread);


  delay(1000);
  if (LDRread <= 50) {
    digitalWrite(LED, HIGH);
  } else {
    digitalWrite(LED, LOW);
  }
}

------------------------------------------------LDR WIfi--------------------

#include<ThingSpeak.h>
#include<ESP8266WiFi.h>

const char *ssid = "Microsoft";
const char *password = "skuuuuur";
int status = WL_IDLE_STATUS;
WiFiClient client;
unsigned long myChannelNumber = 2370229;
const char *myWriteAPIkey = "9KLAF1OZ1D0FYMEB";

const int LDR = A0;
int input_val = 0;
int led = 14;

void setup() {
  Serial.begin(9600);
  pinMode(led,OUTPUT);
  WiFi.disconnect(true);
  WiFi.begin(ssid,password);
  ThingSpeak.begin(client);
  while(WiFi.status() !=WL_CONNECTED)
  {
    delay(500);
    Serial.print(".");
  }
  Serial.println("Wifi Connected");
}

void loop() {
  input_val = analogRead(LDR);
  Serial.print("LDR value Is : ");
  Serial.println(input_val);
  if(input_val<10
  {
    digitalWrite(led,HIGH);
    delay(500);
    digitalWrite(led,LOW);
    delay(500);
  }
  else
  {
    digitalWrite(led,LOW);
    delay(500);
  }
  int x = ThingSpeak.writeField(myChannelNumber,1,(int)input_val,myWriteAPIkey);
  delay(100);
}
-------------------------------




IOT

Program - 1 : Perform Experiment using Arduino Uno to measure the distance of any object using Ultrasonic Sensor.
#define Trigger_pin 11
#define Echo_pin 8 double duration,distance; #define LED 7

void setup()
{
Serial.begin(9600); pinMode(Trigger_pin, OUTPUT); pinMode(Echo_pin, INPUT); pinMode(LED,OUTPUT);
}

void loop()
{
digitalWrite(Trigger_pin, LOW); delayMicroseconds(10); digitalWrite(Trigger_pin, HIGH); delayMicroseconds(10); digitalWrite(Trigger_pin, LOW); duration = pulseIn(Echo_pin,HIGH); distance = duration * 0.034 / 2; if(distance < 20)
{
digitalWrite(LED,HIGH);
}
else{ digitalWrite(LED,LOW);
}
Serial.println(duration); Serial.print(distance); Serial.println("cm"); delay(1000);}

--------------------------------------------------------------------------------------------------------------------

Program - 2 : Perform experiment using IR Motion Sensor for Motion Detection.

int LED = 6;
int isObstaclePin = 13; int isObstacle = HIGH; void setup()
{
pinMode(isObstaclePin,INPUT); pinMode(LED, OUTPUT); Serial.begin(9600);
}

void loop()
{
isObstacle = digitalRead(isObstaclePin); if(isObstacle == LOW)
{
Serial.println("OBSTACLE FOUND"); digitalWrite(LED, HIGH);
}
else
{
Serial.println("OBSTACLE NOT FOUND"); digitalWrite(LED, LOW);
}
}
-------------------------------------------------------------------------------------------------------------------------------
Program - 3 : Interfacing of Temperature sensor.
#include<OneWire.h> #include<DallasTemperature.h>

OneWire oneWire(ONEWIREBUS); DallasTemperature sensors(&oneWire);

void setup() { Serial.begin(9600);
pinMode(ONEWIREBUS,INPUT);
Serial.println(); sensors.begin();
}

void loop() {
// put your main code here, to run repeatedly: sensors.requestTemperatures(); Serial.println("Done");
Serial.println("Temp = "); Serial.println("temprature for pne device index(0)"); delay(1000); Serial.println(sensors.getTempCByIndex(0)); if(sensors.getTempCByIndex(0)>28)
{
Serial.println(sensors.getTempCByIndex(0));
}
}
----------------------------------------------------------------------------------------------------------------
Program - 4 : Interfacing of a Gas Sensor with Arduino.
#define yellowLED 12
#define redLED 13 double sensorValue;

void setup()
{
Serial.begin(9600); pinMode(yellowLED, OUTPUT); pinMode(redLED, OUTPUT); pinMode(A0, INPUT);
}

void loop()
{
sensorValue = analogRead(A0); if(sensorValue > 250 && sensorValue < 350)
{
digitalWrite(yellowLED,HIGH);
}
else if(sensorValue > 350)
{
digitalWrite(yellowLED,LOW); digitalWrite(redLED,HIGH);
}
else
{
digitalWrite(yellowLED,LOW); digitalWrite(redLED,LOW);
}

Serial.println(sensorValue); delay(1000);
}
------------------------------------------------------------------------------------------------------------------
Program - 5 : To interface LED/Buzzer with Arduino/Raspberry Pi and write a program to turn ON LED for 1 sec after every 2 seconds.
int LED_BUILTIN = 7;
void setup()
{
pinMode(LED_BUILTIN, OUTPUT);
}

void loop()
{
digitalWrite(LED_BUILTIN, HIGH); delay(1000); // Wait for 1000 millisecond(s) digitalWrite(LED_BUILTIN, LOW); delay(1000); // Wait for 1000 millisecond(s)
}

---------------------------------------------------------------------------------------------------------------------------------------------------
Program - 6 : To interface LDR with Arduino and write a program to turn ON LED when light intensity increases.
#define LED A2 #define LDR A1 int LDRread;
int brightness = 200;

void setup()
{
pinMode(LED, OUTPUT); pinMode(LDR,INPUT); Serial.begin(9600);
}

void loop()
{
LDRread = analogRead(LDR);
LDRread = map(LDRread, 0, 1023, 0, 200); Serial.println(LDRread);

analogWrite(LED, brightness - LDRread); delay(1000);
}

--------------------------------------------------------------------------------------------------------------------------------------------------------
Program 7
7	Perform experiment using Pulse sensor to count heartbeat.
int const PULSE_SENSOR_PIN = 0;

int Signal; int Threshold = 550;

void setup() { pinMode(LED_BUILTIN,OUTPUT);
Serial.begin(9600);
} void loop()

{

Signal = analogRead(PULSE_SENSOR_PIN); Serial.println(Signal);
if(Signal > Threshold){ digitalWrite(LED_BUILTIN,HIGH);
} else {
digitalWrite(LED_BUILTIN,LOW);
}
delay(10);
}


--------------------------------------------------------------------------------------------------------------------------------------------------------
Program 8	Demonstrate capturing data from Ultrasonic sensor and writing it on ThingSpeak cloud using Wifi module.
#include<ThingsSpeak.h> #include<ESP8266WiFi.h> #define Trigger_pin D3 #define	Echo_pin	D2 double duration,distance;

const char* ssid = "admin"; const char* password = "12345678";

int status = WL_IDLE_STATUS; WiFiClient client;
int sersorValue;
unsigned long myChannelNumber = 2273268; const char* myWriteAPIKey = "Y9YV9YLN7JEGUN42";

void setup()
{
Serial.begin(9600); pinMode(Trigger_pin,OUTPUT); pinMode(Echo_pin,INPUT); WiFi.disconnect(true); WiFi.begin(ssid,password); ThingSpeak.begin(client); while(WiFi.status() != WL_CONNECTED)
{ delay(500); Serial.print(".");
}
Serial.println("WiFi Connected.");
}

void loop()
{ digitalWrite(Trigger_pin,LOW); delayMicroseconds(10); digitalWrite(Trigger_pin,HIGH); delayMicroseconds(10); digitalWrite(Trigger_pin,LOW); duration = pulseIn(Echo_pin,HIGH); distance = duration * 0.034 / 2;

Serial.print("Duration = "); Serial.println(duration); Serial.print("Distance = "); Serial.println(distance);
int x = ThingSpeak.writeField(myChannelNumber,1,(int)distance,myWriteAPIKey); delay(1000);
}

-------------------------------------------------------------------------------------------------------------------------------------------------------
Program 9  	Demonstrate capturing data from Gas sensor and writing it on ThingSpeak cloud using Wifi module.
#include <ThingsSpeak.h> #include <ESP8266WiFi.h> #define yellowLED 12
#define redLED 13 double sensorValue;

const char *ssid = "admin"; const char *password = "12345678";

int status = WL_IDLE_STATUS; WiFiClient client;
unsigned long myChannelNumber = 2273268; const char
*myWriteAPIKey = "Y9YV9YLN7JEGUN42";

void setup()
{
Serial.begin(9600); pinMode(yellowLED, OUTPUT); pinMode(redLED, OUTPUT); pinMode(A0, INPUT); WiFi.disconnect(true); WiFi.begin(ssid, password); ThingSpeak.begin(client);
while (WiFi.status() != WL_CONNECTED)
{ delay(500); Serial.print(".");
}
Serial.println("WiFi Connected.");
}

void loop()
{ sensorValue = analogRead(A0); if (sensorValue
> 250 && sensorValue < 350) { digitalWrite(yellowLED, HIGH);
} else if (sensorValue > 350) { digitalWrite(yellowLED, LOW); digitalWrite(redLED, HIGH);
} else{ digitalWrite(yellowLED, LOW); digitalWrite(redLED, LOW);
}

Serial.print("sensorValue = "); Serial.println(sensorValue);
delay(1000); // Wait for 1000 millisecond(s)
int x = ThingSpeak.writeField(myChannelNumber, 1, (int)sensorValue, myWriteAPIKey); delay(1000);
}



-----------------------------------------------------------------------------------------------------------------------------------------------------------
Program 10  
	Demonstrate capturing data from Temperature sensor and writing it on ThingSpeak cloud using Wifi module.
#include <ThingsSpeak.h> #include <ESP8266WiFi.h> #include <OneWire.h>
#include <DallasTemperature.h>

OneWire oneWire(ONEWIREBUS); DallasTemperature sensors(&oneWire);

const char *ssid = "admin"; const char *password = "12345678";

int status = WL_IDLE_STATUS; WiFiClient client;
int sersorValue;
unsigned long myChannelNumber = 2273268; const char
*myWriteAPIKey = "Y9YV9YLN7JEGUN42";

void setup()
{
Serial.begin(9600); pinMode(ONEWIREBUS, INPUT);
sensors.begin();

WiFi.disconnect(true); WiFi.begin(ssid, password); ThingSpeak.begin(client);
while (WiFi.status() != WL_CONNECTED)
{ delay(500); Serial.print(".");
}
Serial.println("WiFi Connected.");
}

void loop()
{ sensors.requestTemperatures(); Serial.print("Temprature for pne device index(0) = "); delay(1000);
if (sensors.getTempCByIndex(0) > 28)
{ sersorValue = sensors.getTempCByIndex(0); Serial.println(sersorValue);
}

int x = ThingSpeak.writeField(myChannelNumber, 1, (int)sersorValue, myWriteAPIKey); delay(1000);
}



----------------------------------------------------------------------------------------------------------------------------------------------------------
Program 11	Demonstration of Setup Bluetooth Module.
 RX (connects to TXD), TX (connects to RXD) on Arduino SoftwareSerial BTSerial(0, 1);

void setup()
{
Serial.begin(9600);
// HC-05 default baud rate is usually 9600 BTSerial.begin(9600);
} void loop()
{ if (BTSerial.available())
{
// Read the string from Bluetooth
String receivedString = BTSerial.readString();

// Print received string to Serial Monitor Serial.println("Received: " + receivedString);
}
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------
Program 12
Perform LED Blink with python script
Arduino Code const int YellowLED = 5; const int REDLED = 6; const int GreenLED = 7; int incomingByte;

void setup() { Serial.begin(9600);
pinMode(YellowLED,OUTPUT); pinMode(REDLED,OUTPUT);
pinMode(GreenLED,OUTPUT);
}

void loop() { if(Serial.available() > 0)
{ incomingByte = Serial.read(); Serial.print(incomingByte); if(incomingByte == 'Y')
{
digitalWrite(YellowLED,HIGH)
;
}
if(incomingByte == 'R')
{
digitalWrite(REDLED,HIGH)
;
}
if(incomingByte == 'G')
{
digitalWrite(GreenLED,HIGH)
;
}
if(incomingByte == 'C')
{
digitalWrite(YellowLED,LOW)
; digitalWrite(REDLED,LOW); digitalWrite(GreenLED,LOW);
}
}
}

Script.py import serial import time

# ser = serial.Serial(port="COM11",baudrate=9600,timeout=1) ser = serial.Serial("COM11",9600,timeout=1) time.sleep(2)
 
print("This allow a user to turn on LED on Off") print("Type Y to turn the Yellow LED ON") print("Type R to turn the Red LED ON") print("Type G to turn the Green LED ON") print("Type C to turn the All LED OFF")
 

print("Type Q to turn the LED Quit")

userinput = 'C' while userinput != 'Q':
userinput = input("Y = On, R = On, G = On, C = Off, Q = Quit :
")
byte_command = userinput.encode() ser.write(byte_command) time.sleep(0.5) ser.close()

---------------------------------------------------------------------------------------------------------------------------------------------------------

**Interface Ultrasonic sensor with NodeMCU. Use pin D6 (GPIO 12) for Trigger Pin and D5 (GPIO 14) for Echo Pin.
Create a channel on ThingSpeak Cloud named UltrasonicTest with one field called Distance.
Connect to inbuilt WiFi ESP8266 module of NodeMCU and print the status of the WiFi connection.
Write a code to upload distance calculated from the data captured from the ultrasonic sensor on the channel using appropriate Channel ID and
API Keys. (Sound Velocity = 0.034 and inch = cm * 0.393701)



#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>

#define TRIG_PIN D6
#define ECHO_PIN D5

const char *ssid = "your_wifi_ssid";
const char *password = "your_wifi_password";
const char *thingSpeakAddress = "api.thingspeak.com";
const char *writeAPIKey = "your_api_key";
const char *channelID = "your_channel_id";

void setup() {
  Serial.begin(115200);
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  connectToWiFi();
}

void loop() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  long duration = pulseIn(ECHO_PIN, HIGH);
  float distance_inch = duration * 0.034 / 2 * 0.393701;

  Serial.print("Distance: ");
  Serial.print(distance_inch);
  Serial.println(" inches");

  uploadToThingSpeak(distance_inch);
  delay(10000);
}

void connectToWiFi() {
  Serial.println("Connecting to WiFi...");
  WiFi.begin(ssid, password);

  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(1000);
    attempts++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nWiFi Connected");
  } else {
    Serial.println("\nFailed to connect to WiFi. Please check your credentials.");
    while (1) {
      delay(1000);
    }
  }
}

void uploadToThingSpeak(float distance) {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    String url = "http://" + String(thingSpeakAddress) + "/update?api_key=" + String(writeAPIKey) + "&field1=" + String(distance);
    http.begin(url);

    int httpCode = http.GET();

    if (httpCode == 200) {
      Serial.println("Upload successful to ThingSpeak");
    } else {
      Serial.println("Error uploading to ThingSpeak. HTTP code: " + String(httpCode));
    }

    http.end();
  } else {
    Serial.println("WiFi not connected. Unable to upload to ThingSpeak.");
  }
}

--------------------------------------------------------------------


Interface Pulse (heartbeat) Sensor with Arduino Uno Board.
Interface given LED light with Arduino Uno Board.
Write a code such that if BPM goes above some threshold, then LED should be TURNED ON. Also print BPM on a serial monitor. (Use initial threshold between 515 to 520 and adjust threshold to get accurate measurement)

const int pulsePin = A0;
const int ledPin = 13;
int threshold = 515;

unsigned long sampleInterval = 2;
unsigned long lastSampleTime = 0;

void setup() {
  Serial.begin(9600);
  pinMode(ledPin, OUTPUT);
}

void loop() {
  int sensorValue = analogRead(pulsePin);
  unsigned long currentTime = millis();

  if (currentTime - lastSampleTime >= sampleInterval) {
    int bpm = getHeartRate(sensorValue);

    Serial.print("BPM: ");
    Serial.println(bpm);

    if (bpm > threshold) {
      digitalWrite(ledPin, HIGH);
      Serial.println("Threshold exceeded. LED ON");
    } else {
      digitalWrite(ledPin, LOW);
      Serial.println("BPM within normal range. LED OFF");
    }

    lastSampleTime = currentTime;
  }
}

int getHeartRate(int sensorValue) {
  int heartRate = map(sensorValue, 0, 1023, 30, 150);
  return heartRate;
}


-----------------------------------------------------------------


interface a temperature sensing mechanism employing the DS18B20 temperature [20] sensor, a Node MCU, and an LED light. When the temperature crosses a set threshold, the LED should activate, signaling an increase in temperature; otherwise, it should remain off.
Cated emperati on Thingspeak Choud named Temperatureest with one field called temperature.
Connect to inbuilt WiFi ESP8266 module of NodeMCU and print the status of the Wifi connection.
write a code to upload data capptured from the tempearture module on the channel using appropriate channel ID and API key

#include <OneWire.h>
#include <DallasTemperature.h>
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>

#define ONE_WIRE_BUS D2
#define LED_PIN D7

OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);

const char *ssid = "your_wifi_ssid";
const char *password = "your_wifi_password";
const char *thingSpeakAddress = "api.thingspeak.com";
const char *writeAPIKey = "your_api_key";
const char *channelID = "your_channel_id";
const float temperatureThreshold = 25.0;

void setup() {
  Serial.begin(115200);
  pinMode(LED_PIN, OUTPUT);
  connectToWiFi();
  sensors.begin();
}

void loop() {
  sensors.requestTemperatures();
  float temperature = sensors.getTempCByIndex(0);

  if (temperature != DEVICE_DISCONNECTED_C) {
    if (temperature > temperatureThreshold) {
      digitalWrite(LED_PIN, HIGH);
      uploadToThingSpeak(temperature);
    } else {
      digitalWrite(LED_PIN, LOW);
    }

    Serial.print("Temperature: ");
    Serial.print(temperature);
    Serial.println(" °C");
  } else {
    Serial.println("Error reading temperature from the sensor");
  }

  delay(10000);
}

void connectToWiFi() {
  Serial.println("Connecting to WiFi...");
  WiFi.begin(ssid, password);

  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(1000);
    attempts++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nWiFi Connected");
  } else {
    Serial.println("\nFailed to connect to WiFi. Please check your credentials.");
    while (1) {
      delay(1000);
    }
  }
}

void uploadToThingSpeak(float temperature) {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    String url = "http://" + String(thingSpeakAddress) + "/update?api_key=" + String(writeAPIKey) + "&field1=" + String(temperature);
    http.begin(url);

    int httpCode = http.GET();

    if (httpCode == 200) {
      Serial.println("Upload successful to ThingSpeak");
    } else {
      Serial.println("Error uploading to ThingSpeak. HTTP code: " + String(httpCode));
    }

    http.end();
  } else {
    Serial.println("WiFi not connected. Unable to upload to ThingSpeak.");
  }
}
----------------------------------------------------------------------








//Perform Experiment using Arduino Uno to measure the distance of any object using Ultrasonic Sensor.
#define Trigger_pin 11
#define Echo_pin 8
double duration,distance;
#define LED 7
void setup()
{
    Serial.begin(9600);
    pinMode(Trigger_pin, OUTPUT);
    pinMode(Echo_pin, INPUT);
    pinMode(LED, OUTPUT);
}
void loop()
{
    digitalWrite(Trigger_pin, LOW);
    delayMicroseconds(10);
    digitalWrite(Trigger_pin, HIGH);
    delayMicroseconds(10);
    digitalWrite(Trigger_pin, LOW);
    duration = pulseIn(Echo_pin, HIGH);
    distance = duration * 0.034 / 2;
    if (distance < 20)
    {
        digitalWrite(LED, HIGH);
    }
    else
    {
        digitalWrite(LED, LOW);
    }
    Serial.println(duration);
    Serial.print(distance);
    Serial.println("cm");
    delay(1000);
}


===============================================================

//Perform experiment using IR Motion Sensor for Motion Detection.
int LED = 6;
int isObstaclePin = 13;
int isObstacle = HIGH;
void setup()
{
    pinMode(isObstaclePin, INPUT);
    pinMode(LED, OUTPUT);
    Serial.begin(9600);
}
void loop()
{
    isObstacle = digitalRead(isObstaclePin);
    if (isObstacle == LOW)
    {
        Serial.println("OBSTACLE FOUND");
        digitalWrite(LED, HIGH);
    }
    else
    {
        Serial.println("OBSTACLE NOT FOUND");
        digitalWrite(LED, LOW);
    }
}


===============================================


//Interfacing of Temperature sensor.
#include <OneWire.h>
#include <DallasTemperature.h>
    OneWire oneWire(ONEWIREBUS);
DallasTemperature sensors(&oneWire);
void setup()
{
    Serial.begin(9600);
    pinMode(ONEWIREBUS, INPUT);
    Serial.println();
    sensors.begin();
}
void loop()
{
    // put your main code here, to run repeatedly:
    sensors.requestTemperatures();
    Serial.println("Done");
    Serial.println("Temp = ");
    Serial.println("temprature for pne device index(0)");
    delay(1000);
    Serial.println(sensors.getTempCByIndex(0));
    if (sensors.getTempCByIndex(0) > 28)
    {
        Serial.println(sensors.getTempCByIndex(0));
    }
}

=================================================


//Interfacing of a Gas Sensor with Arduino.
#define yellowLED 12
#define redLED 13
    double sensorValue;
void setup()
{
    Serial.begin(9600);
    pinMode(yellowLED, OUTPUT);
    pinMode(redLED, OUTPUT);
    pinMode(A0, INPUT);
}
void loop()
{
    sensorValue = analogRead(A0);
    if (sensorValue > 250 && sensorValue < 350)
    {
        digitalWrite(yellowLED, HIGH);
    }
    else if (sensorValue > 350)
    {
        digitalWrite(yellowLED, LOW);
        digitalWrite(redLED, HIGH);
    }
    else
    {
        digitalWrite(yellowLED, LOW);
        digitalWrite(redLED, LOW);
    }
    Serial.println(sensorValue);
    delay(1000); // Wait for 1000 millisecond(s)
}


==========================================

//To interface LED/Buzzer with Arduino/Raspberry Pi and write a program to turn ON LED for 1 sec after every 2 seconds.
int LED_BUILTIN = 7;
void setup()
{
    pinMode(LED_BUILTIN, OUTPUT);
}
void loop()
{
    digitalWrite(LED_BUILTIN, HIGH);
    delay(1000); // Wait for 1000 millisecond(s)
    digitalWrite(LED_BUILTIN, LOW);
    delay(1000); // Wait for 1000 millisecond(s)
}

=========================================

//To interface LDR with Arduino and write a program to turn ON LED when light intensity increases.
#define LED A2
#define LDR A1
int LDRread;
int brightness = 200;
void setup()
{
    pinMode(LED, OUTPUT);
    pinMode(LDR, INPUT);
    Serial.begin(9600);
}
void loop()
{
    LDRread = analogRead(LDR);
    LDRread = map(LDRread, 0, 1023, 0, 200);
    Serial.println(LDRread);
    analogWrite(LED, brightness - LDRread);
    delay(1000);
}
